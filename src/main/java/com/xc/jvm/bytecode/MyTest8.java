package com.xc.jvm.bytecode;


/**
 * 现代jvm在执行java代码的时候,通常会将解释执行与编译执行二者结合起来
 * <p>
 * 解释执行:通过解释器来读取字节码,遇到相应的指令就去执行该指令
 * 编译执行:通过即时编译器(just in time,JIT)将字节码转换为本地机器码来执行;现代jvm会根据代码热点来生成
 * 相应的本地机器码
 * <p>
 * 基于栈的指令集与基于寄存器的指令集之间的关系:
 * <p>
 * 1.jvm执行指令是采用的方式是基于栈的指令集
 * 2.基于栈的指令集主要操作有入栈与出栈两种
 * 3.基于栈的指令集的优势在于它可以在不同平台之间移植,而基于寄存器的指令集是与硬件架构紧密关联的,无法做到可移植
 * 4.基于栈的指令集缺点在于完成相同的操作,指令的数量通常要比基于寄存器的指令集数量要多;基于栈的指令是在内存中完成操作的,
 * 二基于寄存器的指令集是直接由cpu来执行的,是在高速缓冲区中进行执行的,速度要快很多,虽然jvm可以采用一些优化手段,
 * 但整体来说,基于栈的指令集执行速度要慢一些
 */
public class MyTest8 {

    public int myCalculate() {

        int a = 2;
        int b = 3;
        int c = 4;
        int d = 5;

        int result = (a + b - c) * d;
        return result;
    }
}
